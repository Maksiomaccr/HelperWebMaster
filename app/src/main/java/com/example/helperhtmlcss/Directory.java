package com.example.helperhtmlcss;

import androidx.appcompat.app.AppCompatActivity;
import androidx.fragment.app.Fragment;
import androidx.fragment.app.FragmentTransaction;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;

import android.annotation.SuppressLint;
import android.content.Intent;
import android.os.Bundle;
import android.view.View;
import android.widget.Button;
import android.widget.ImageButton;

import com.example.helperhtmlcss.CSS.CSSCource;
import com.example.helperhtmlcss.favorite.html.AtributeAdapter;
import com.example.helperhtmlcss.favorite.html.AtributeItem;

import java.util.ArrayList;
import java.util.List;

public class Directory extends AppCompatActivity {

    private Button currentButton;
    private ArrayList<AtributeItem> atributeItems = new ArrayList<>();
    private ArrayList<AtributeItem> fullItem = new ArrayList<>();
    AtributeAdapter atributeAdapter = new AtributeAdapter(atributeItems, this);
    Button btn1, btn2, btn3, btn4, btn5, btn6;
    RecyclerView recyclerView;

    @SuppressLint("MissingInflatedId")
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_directory);
        ImageButton btn_back = findViewById(R.id.button_back);
        btn_back.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                Intent intent = new Intent(Directory.this, MainActivity.class);
                startActivity(intent);

            }
        });
        btn1 = findViewById(R.id.btn1);
        btn1.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                
                show("1");
                handleButtonClicked(btn1);
            }
        });
        btn2 = findViewById(R.id.btn2);
        btn2.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                show("2");
                handleButtonClicked(btn2);
            }
        });
        btn3 = findViewById(R.id.btn3);
        btn3.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                show("3");
                handleButtonClicked(btn3);
            }
        });
        btn4 = findViewById(R.id.btn4);
        btn4.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                show("4");
                handleButtonClicked(btn4);
            }
        });
        btn5 = findViewById(R.id.btn5);
        btn5.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                show("5");
                handleButtonClicked(btn5);
            }
        });
        btn6 = findViewById(R.id.btn6);
        btn6.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                show("6");
                handleButtonClicked(btn6);
            }
        });




        recyclerView = findViewById(R.id.rvhtml);
        recyclerView.setHasFixedSize(true);
        recyclerView.setAdapter(new AtributeAdapter(atributeItems, this));
        recyclerView.setLayoutManager(new LinearLayoutManager(this, RecyclerView.VERTICAL, false));

        atributeItems.add(new AtributeItem(R.drawable.htmlglobal, "accesskey", "Даёт подсказку для создания комбинации клавиш для текущего элемента.", "0", "0", "\tЭтот атрибут содержит список разделённых пробелами символов. Браузер должен использовать первый имеющийся в раскладке клавиатуры символ из списка.", "", "1"));
        atributeItems.add(new AtributeItem(R.drawable.htmlglobal, "class", "Это список разделённых пробелами классов элемента.", "1", "0", "\tКлассы позволяют CSS и JavaScript выбирать и получать доступ к конкретным элементам через селекторы по классу или через функции, такие как метод Document.getElementsByClassName().", "", "1"));
        atributeItems.add(new AtributeItem(R.drawable.htmlglobal, "contenteditable", "Указывает, нужно ли предоставить пользователю возможность редактировать элемент.", "2", "0", "\tЭто перечислимый атрибут, указывающий, нужно ли предоставить пользователю возможность редактировать элемент. Если это так, браузер изменит свой виджет таким образом, чтобы позволить редактирование. Атрибут должен принимать одно из следующих значений:\n" +
                "\ttrue или пустая строка, указывает, что элемент должен быть редактируемым;\n" +
                "\tfalse, указывает, что элемент не должен быть редактируемым.", "", "1"));
        atributeItems.add(new AtributeItem(R.drawable.htmlglobal, "contextmenu (en-US)", "Идентификатор в качетсве контекстного меню.", "3", "0", "Это id элемента <menu>, который следует использовать в качестве контекстного меню для данного элемента.", "", "1"));
        atributeItems.add(new AtributeItem(R.drawable.htmlglobal, "data-*", "Определяет группу атрибутов", "4", "0", "Определяет группу атрибутов, называемых атрибутами пользовательских данных, позволяющих осуществлять обмен служебной информацией между HTML и его DOM представлением, что может быть использовано скриптами. Все такие пользовательские данные доступны через интерфейс HTMLElement элемента у которого установлен атрибут. Свойство HTMLElement.dataset (en-US) предоставляет доступ к ним.", "", "1"));
        atributeItems.add(new AtributeItem(R.drawable.htmlglobal, "dir", "Указывает направление текста в элементе.", "5", "0", "Это перечислимый атрибут указывающий направление текста в элементе. Он может принимать одно из следующих значений:\n" +
                "\tltr, что расшифровывается как left to right (слева направо), и предназначено для языков, в которых пишут слева направо (как в русском);\n" +
                "\trtl, что расшифровывается как right to left (справа налево), и предназначено для языков, в которых пишут справа налево (как в арабском);\n" +
                "\tauto — позволяет принять решение пользовательскому приложению. Оно применяет базовый алгоритм — анализирует символы внутри элемента до тех пор, пока не найдёт символ со строгим направлением, а затем применяет это направление ко всему элементу.", "", "1"));
        atributeItems.add(new AtributeItem(R.drawable.htmlglobal, "draggable (en-US)", "Указывает, можно ли перетаскивать элемент.", "6", "0", "Это перечислимый атрибут, указывающий, можно ли перетаскивать элемент с помощью Drag and Drop API. Он может принимать одно из следующих значений:\n" +
                "\ttrue, указывающее, что элемент можно перетаскивать;\n" +
                "\tfalse, указывающее, что элемент нельзя перетаскивать.", "", "1"));
        atributeItems.add(new AtributeItem(R.drawable.htmlglobal, "hidden", "Указывает, что элемент уже не актуален.", "7", "0", "\tЭто логический атрибут, указывающий, что элемент уже (или ещё) не актуален. Можно использовать этот атрибут, например для того, чтобы спрятать части страницы, которые не должны быть видны до завершения авторизации. Браузер не будет отображать такие элементы. Этот атрибут не должен использоваться, чтобы скрыть содержимое, которое может быть показано на законных основаниях.", "", "1"));
        atributeItems.add(new AtributeItem(R.drawable.htmlglobal, "id", "Определяет идентификатор.", "8", "0", "\tОпределяет идентификатор (ID), который должен быть уникален для всего документа. Он предназначен для идентификации элемента при создании ссылок на него, исполнении скриптов или применении стилей (посредством CSS).", "", "1"));
        atributeItems.add(new AtributeItem(R.drawable.htmlglobal, "lang", "Определяет язык элемента", "9", "0", "\tУчаствует в определении языка элемента, языка написания нередактируемых элементов или языка, на котором должны быть написаны редактируемые элементы. Содержит единственное значение в формате, определённом в документе IETF BCP47. xml:lang имеет приоритет над ним.", "", "1"));
        atributeItems.add(new AtributeItem(R.drawable.htmlglobal, "spellcheck", "Определяет, может ли содержимое элемента быть проверено на наличие ошибок.", "10", "0", "\tЭто перечислимый атрибут, определяющий, может ли содержимое элемента быть проверено на наличие орфографических ошибок. Он может принимать одно из следующих значений:\n" +
                "\ttrue, указывающее, что элемент должен, по возможности, проверяться на наличие орфографических ошибок;\n" +
                "\tfalse, указывающее, что элемент не должен проверяться на наличие орфографических ошибок.", "", "1"));
        atributeItems.add(new AtributeItem(R.drawable.htmlglobal, "style", "Содержит описание стилей CSS", "11", "0", "\tСодержит описание стилей CSS, которые должны быть применены к элементу. Учтите, что рекомендуется определять стили в отдельном файле или файлах. Этот атрибут, как и элемент <style>, предназначен, в основном, для оперативного применения стилей, например в целях тестирования.", "", "1"));
        atributeItems.add(new AtributeItem(R.drawable.htmlglobal, "tabindex", "Указывает, может ли элемент получать фокус.", "12", "0", "\tЭто числовой атрибут, указывающий, может ли элемент получать фокус, участвует ли он в последовательной навигации с клавиатуры, и если да, то в какой позиции. Может принимать одно из нескольких значений:\n" +
                "\tотрицательное число означает, что элемент фокусируемый, но он не может получить фокус посредством последовательной навигации с клавиатуры;\n" +
                "\t0 означает, что элемент фокусируемый и может получить фокус посредством последовательной навигации с клавиатуры, но порядок его следования определяется платформой.", "", "1"));
        atributeItems.add(new AtributeItem(R.drawable.htmlglobal, "title", "Содержит текст, предоставляющий консультативную информацию элементу.", "13", "0", "\tСодержит текст, предоставляющий консультативную информацию об элементе. Эта информация может, но не обязательно, показываться пользователю в виде всплывающей подсказки.", "", "1"));
        atributeItems.add(new AtributeItem(R.drawable.htmlglobal, "translate", "Указывает, следует ли переводить значение атрибутов элементов.", "14", "0", "\tЭто перечислимый атрибут, используемый для того, чтобы указать, следует ли переводить значения атрибутов элемента и его текстовое содержимое (содержимое узла Text) при локализации страницы. Этот атрибут может принимать следующие значения:\n" +
                "\tпустая строка или \"yes\" указывает, что элемент должен быть переведён;\n" +
                "\t\"no\" указывает, что элемент не должен быть переведён.", "", "1"));
        atributeItems.add(new AtributeItem(R.drawable.htmltext, "<b>", "Делает текст полужирным", "15", "0", "\tВизуально выделяет текст жирным начертанием.", "b", "2"));
        atributeItems.add(new AtributeItem(R.drawable.htmltext, "<strong>", "Делает текст полужирным, указывая логически на важность текста.", "16", "0", "\tОтображает текст жирным начертанием, логически указывает на важность текста. Может быть использован для выделения ключевых слов для оптимизации поиска.", "strong", "2"));
        atributeItems.add(new AtributeItem(R.drawable.htmltext, "<i>", "Задаёт курсивное начертание текста.", "17", "0", "\tЗадаёт курсивное начертание текста.", "i", "2"));
        atributeItems.add(new AtributeItem(R.drawable.htmltext, "<em>", "Задаёт курсивное начертание текста, логически указывая на важность текста.", "18", "0", "\tЗадаёт курсивное начертание текста, логически указывая на важность текста.", "em", "2"));
        atributeItems.add(new AtributeItem(R.drawable.htmltext, "<u>", "Подчёркивает текст.", "19", "0", "\tПодчёркивает текст.", "u", "2"));
        atributeItems.add(new AtributeItem(R.drawable.htmltext, "<pre>", "Сохраняет форматирование текста.", "20", "0", "\tСохраняет форматирование текста (не удаляет пробелы и переносы строк).", "pre", "2"));
        atributeItems.add(new AtributeItem(R.drawable.htmltext, "<sup>", "Текст отображается как верхний индекс.", "21", "0", "\tМожет быть использован для указания степени.", "sup", "2"));
        atributeItems.add(new AtributeItem(R.drawable.htmltext, "<sub>", "Текст отображается как нижний индекс.", "22", "0", "\tМожет быть использован для записи математических и химических формул.", "sub", "2"));
        atributeItems.add(new AtributeItem(R.drawable.htmltext, "<small>", "Уменьшает текст на условную единицу.", "23", "0", "\t", "small", "2"));
        atributeItems.add(new AtributeItem(R.drawable.htmltext, "<address>", "Внутри текста указывает какой-либо адресс.", "24", "0", "\tВнутри указывается адрес (физический адрес, телефон, почта), обычно отображается курсивным шрифтом.", "adress", "2"));
        atributeItems.add(new AtributeItem(R.drawable.htmltext, "<mark>", "Отображет текст как выделенный.", "25", "0", "\t", "mark", "2"));
        atributeItems.add(new AtributeItem(R.drawable.htmltext, "<abbr>", "Оборачивает аббревиатуру.", "26", "0", "\tОборачивает аббревиатуру (сокращение), в атрибуте title указывается ее расшифровка, которая показывается при наведении.", "abbr", "2"));
        atributeItems.add(new AtributeItem(R.drawable.htmltext, "<kbd>", "Отображает название клавиш или текст, набранные пользователем.", "27", "0", "\tОтображает название клавиш или текст набранный пользователем, обычно отображается моноширинным шрифтом.", "kbd", "2"));
        atributeItems.add(new AtributeItem(R.drawable.htmltext, "<bfn>", "Отображение термина и его пояснения.", "28", "0", "\tВнутри пишется название нового термина, далее идет его пояснение, обычно отображается курсивным шрифтом.", "bfn", "2"));
        atributeItems.add(new AtributeItem(R.drawable.htmltext, "<ins>", "Выделяет новый текст, добавленный при обновлении содержания.", "29", "0", "\tВыделяет новый текст, который был добавлен при обновлении содержания, обычно отображается как подчеркнутый текст.", "", "2"));
        atributeItems.add(new AtributeItem(R.drawable.htmltext, "<del>", "Выделяет старый текст, который был удалён при обновлении содержания.", "30", "0", "\tВыделяет старый текст, который был удален при обновлении содержания, обычно отображается как зачеркнутый текст.", "", "2"));
        atributeItems.add(new AtributeItem(R.drawable.htmltext, "<s>", "Зачёркивает текст.", "31", "0", "\tЗачёркивает текст.", "s", "2"));
        atributeItems.add(new AtributeItem(R.drawable.htmltext, "<q>", "Отображает текст, как цитату.", "32", "0", "\tОтображает текст как цитату, обрамляет его кавычками.", "q", "2"));
        atributeItems.add(new AtributeItem(R.drawable.htmltext, "<blockquote>", "Отображает длинный текст, как цитату.", "33", "0", "\tОтображает текст как цитату. По сравнению с тегом используется для длинных цитат, оформляется отступами.", "blockquote", "2"));
        atributeItems.add(new AtributeItem(R.drawable.htmltext, "<cite>", "Отсылкает цитату на материал из другого из другого источника.", "34", "0", "\tОтсылает цитату на материал из другого источника, обычно отображается курсивным шрифтом.", "", "2"));
        atributeItems.add(new AtributeItem(R.drawable.htmltext, "<span>", "Строчный тэг.", "35", "0", "\tСтрочный тег. Сам по себе не имеет никакого логического или визуального смысла. Часто используется внутри абзаца для выделения части текста. Если часть текста нужно стилизовать по другому, ее можно обернуть в span, указать класс и в css добавить нужные стили.", "", "2"));
        atributeItems.add(new AtributeItem(R.drawable.htmltext, "<br>", "Переносит текст на новую строку.", "36", "0", "\tПереносит текст на новую строку.", "br", "2"));
        atributeItems.add(new AtributeItem(R.drawable.htmltext, "<wbr>", "Указывает где можно сделать перенос слова.", "37", "0", "\tУказывает где можно сделать перенос слова.", "", "2"));
        atributeItems.add(new AtributeItem(R.drawable.htmltext, "<hr>", "Вставляет горизонтальную полосу.", "38", "0", "\tВставляет горизонтальную полосу.", "hr", "2"));
        atributeItems.add(new AtributeItem(R.drawable.htmltext, "<bdo>", "Задаёт направление текста.", "39", "0", "\tЗадает направление текста, в атрибуте dir указывается направление: rtl - справа на лево, ltr - слева направо.", "bdo", "2"));
        atributeItems.add(new AtributeItem(R.drawable.htmltext, "<bdi>", "Запрещает изменение напрвления текста.", "40", "0", "\tЗапрещает изменение направления текста, по аналогии с bdo направление указывается в атрибуте dir, по умолчанию значение auto.", "", "2"));
        atributeItems.add(new AtributeItem(R.drawable.htmltext, "<code>", "Оборачивает программный код.", "41", "0", "\tОборачивает программный код, обычно отображается моноширинным шрифтом, не учитывает переносы строк и дополнительные пробелы.", "code", "2"));
        atributeItems.add(new AtributeItem(R.drawable.htmltext, "<var>", "Оборачивает переменную их программного кода.", "42", "0", "\tОборачивает переменную из программного кода, обычно отображается моноширинным шрифтом.", "", "2"));
        atributeItems.add(new AtributeItem(R.drawable.htmltext, "<samp>", "Оборачивает текст результата вывода кода.", "43", "0", "\tОборачивает текст, которые является результатом вывода скрипта или программы, обычно отображается моноширинным шрифтом.", "samp", "2"));
        atributeItems.add(new AtributeItem(R.drawable.htmllist, "value", "Указывает на текущий порядковый номер элемента в списке.", "44", "0", "\tЭтот числовой атрибут указывает на текущий порядковый номер элемента в списке, заданного с помощью элемента <ol>. Единственное разрешённое значение этого атрибута — число, даже если список отображается с римскими цифрами или буквами. Элементы списка, которые идут после элемента с таким атрибутом, нумеруются с заданного значения. Атрибут value не имеет значения для неупорядоченных списков (<ul>) или для меню (<menu>).", "value", "3"));
        atributeItems.add(new AtributeItem(R.drawable.htmllist, "type", "Указывает тип нумерации.", "45", "0", "\tЭтот символьный атрибут указывает на тип нумерации:\n" +
                "\ta: строчные буквы\n" +
                "\tA: заглавные буквы\n" +
                "\ti: строчные римские цифры\n" +
                "\tI: заглавные римские цифры\n" +
                "\t1: цифрыЭтот атрибут переопределяет тип унаследованный от родительского элемента <ol> или любого другого.", "type", "3"));
        atributeItems.add(new AtributeItem(R.drawable.htmllist, "start", "Задаёт начальное значение списка.", "46", "0", "\tАтрибут start задает начальное значение, от которого пойдет отсчет нумерации, например, конструкция <ol start=\"10\"> первому пункту присвоит порядковый номер «10». Также можно одновременно задавать тип нумерации, например, <ol type=\"I\" start=\"10\">.", "start", "3"));
        atributeItems.add(new AtributeItem(R.drawable.htmllist, "reversed", "Задаёт отображение списка в обратном порядке.", "47", "0", "\tЗадаёт отображение списка в обратном порядке.", "reversed", "3"));
        atributeItems.add(new AtributeItem(R.drawable.htmllinks, "download", "Сообщает браузеру, что ресурс должен быть загружен в момент нажатия по ссылке.", "48", "0", "\tДополняет атрибут href и сообщает браузеру, что ресурс должен быть загружен в момент, когда пользователь щелкает по ссылке, вместо того, чтобы, например, предварительно открыть его (как PDF-файл). Задавая имя для атрибута, мы таким образом задаем имя загружаемому объекту. Разрешается использовать атрибут без указания его значения.", "download", "4"));
        atributeItems.add(new AtributeItem(R.drawable.htmllinks, "href", "Указывает URL-адрес документа, на который указывает ссылка.", "49", "0", "\tЗначением атрибута является URL-адрес документа, на который указывается ссылка.", "", "4"));
        atributeItems.add(new AtributeItem(R.drawable.htmllinks, "hreflang", "Определяет язык связанного веб-документа.", "50", "0", "\tОпределяет язык связанного веб-документа. Используется только вместе с атрибутом href. Принимаемые значения — аббревиатура, состоящая из пары букв, обозначающих код языка.", "", "4"));
        atributeItems.add(new AtributeItem(R.drawable.htmllinks, "media", "Определяет, для каких типов устройств файл будет оптимизирован.", "51", "0", "\tОпределяет, для каких типов устройств файл будет оптимизирован. Значением может быть любой медиа-запрос.", "", "4"));
        atributeItems.add(new AtributeItem(R.drawable.htmllinks, "ping", "Отслеживает URL-адреса ресурсов, по которым переходил пользователь.", "52", "0", "\tОтслеживает URL-адреса ресурсов, по которым переходил пользователь.", "", "4"));
        atributeItems.add(new AtributeItem(R.drawable.htmllinks, "rel", "Дополняет информацией об отношении между текущим и связанным документом.", "53", "0", "\tДополняет атрибут href информацией об отношении между текущим и связанным документом. Принимаемые значения:\n" +
                "\talternate — ссылка на альтернативную версию документа (например, печатную форму страницы, перевод или зеркало).\n" +
                "\tauthor — ссылка на автора документа.\n" +
                "\tbookmark — постоянный URL-адрес, используемый для закладок.\n" +
                "\thelp — ссылка на справку.\n" +
                "\tlicense — ссылка на информацию об авторских правах на данный веб-документ.\n" +
                "\tnext/prev — указывает связь между отдельными URL. Благодаря этой разметке Google может определить, что содержание данных страниц связано в логической последовательности.\n" +
                "\tnofollow — запрещает поисковой системе переходить по ссылкам на данной странице или по конкретной ссылке.\n" +
                "\tnoreferrer — указывает, что переходе по ссылке браузер не должен посылать заголовок HTTP-запроса (Referrer), в который записывается информация о том, с какой страницы пришел посетитель сайта.\n" +
                "\tprefetch — указывает, что целевой документ должен быть кэширован, т.е. браузер в фоновом режиме загружает содержимое страницы к себе в кэш.\n" +
                "\tsearch — указывает, что целевой документ содержит инструмент для поиска.\n" +
                "\ttag — указывает ключевое слово для текущего документа.", "", "4"));
        atributeItems.add(new AtributeItem(R.drawable.htmllinks, "target", "Указывает на то, в каком окне должен открываться документ, к которому ведёт ссылка.", "54", "0", "\tУказывает на то, в каком окне должен открываться документ, к которому ведет ссылка. Принимает следующие значения:\n" +
                "\t_self — страница загружается в текущее окно;\n" +
                "\t_blank — страница открывается в новом окне браузера;\n" +
                "\t_parent — страница загружается во фрейм-родитель;\n" +
                "\t_top — страница загружается в полное окно браузера.", "", "4"));
        atributeItems.add(new AtributeItem(R.drawable.htmltable, "colspan", "Указывает колличество ячеек в строке для объеденения по горизонтали.", "55", "0", "\tКоличество ячеек в строке для объединения по горизонтали.\n" +
                "\t<td colspan=\"3\">\n" +
                "\tВозможные значения: число от 1 до 999.", "colspan", "5"));
        atributeItems.add(new AtributeItem(R.drawable.htmltable, "headers", "Задаёт список ячеек заголовка.", "56", "0", "\tЗадает список ячеек заголовка, содержащих информацию о заголовке текущей ячейки данных. Предназначен для речевых браузеров.\n" +
                "\t<th id=\"идентификатор\">...</th>\n" +
                "\t<th headers=\"идентификатор\">...</th>\n" +
                "\tПринимаемые значения: список имен ячеек, разделенных пробелами; эти имена должны быть присвоены ячейкам через их атрибут id.", "headers", "5"));
        atributeItems.add(new AtributeItem(R.drawable.htmltable, "rowspan", "Указывает колличество ячеек в столбце для объекденения по вертикали.", "57", "0", "\tКоличество ячеек в столбце для объединения по вертикали.\n" +
                "\t<td rowspan=\"2\">\n" +
                "\tВозможные значения: число от 1 до 999.", "rowspan", "5"));
        atributeItems.add(new AtributeItem(R.drawable.htmltable, "span", "Указывает количество колонок, объеденяемых для задания единого стиля.", "58", "0", "\tКоличество колонок, объединяемых для задания единого стиля, по умолчанию равно 1.\n" +
                "\t<col span=\"2\">\n" +
                "\tПринимаемые значения: любое целое положительное число.", "", "5"));
        atributeItems.add(new AtributeItem(R.drawable.htmlform, "accept-charset", "Определяет кодировку символов.", "59", "0", "\tОпределяет кодировку символов, которая должна использоваться для отправки формы. Если указано, значение должно соответствовать кодировке UTF-8 без учета регистра ASCII.\n" +
                "\tСинтаксис: accept-charset=\"UTF-8\"", "", "6"));
        atributeItems.add(new AtributeItem(R.drawable.htmlform, "action", "Указывает URL-адрес обработчика формы.", "60", "0", "\tУказывает url-адрес обработчика формы. Когда форма отправляется, данные в форме преобразуются в структуру в соответствии с указанным типом кодировки enctype, а затем отправляются в место, указанное action, с использованием метода отправки данных method.\n" +
                "\tСинтаксис: action=\"subscribe.php\"", "", "6"));
        atributeItems.add(new AtributeItem(R.drawable.htmlform, "autocomplete", "Указывает, может ли значение элемента <input> автоматически заполняться браузером.", "61", "0", "\tУказывает, может ли значение элементов <input> автоматически заполняться браузером.\n" +
                "\tРазрешенные значения:\n" +
                "\toff — пользователь должен явно вводить значение в это поле для каждого использования.\n" +
                "\ton — браузер может автоматически дополнять значение на основе значений, которые пользователь ввел во время предыдущих использований.\n" +
                "\tСинтаксис: autocomplete=\"off\"", "", "6"));
        atributeItems.add(new AtributeItem(R.drawable.htmlform, "enctype", "Указывает MIME-тип данных формы для отправки на сервер.", "62", "0", "\tУказывает MIME-тип данных формы для отправки на сервер только в случае method=\"post\". Это значение может быть переопределено атрибутом formenctype в элементах <button>, <input type=\"image\"> или <input type=\"submit\">.\n" +
                "\tРазрешенные значения:\n" +
                "\tapplication/x-www-form-urlencoded — значение по умолчанию. Данные формы кодируются как пары имя-значение, аналогично строке запроса URI. Это формат по умолчанию для POST. Тело HTTP-сообщения, отправляемого на сервер, представляет собой одну строку запроса — пары имя-значение разделены &, а имена отделены от значений знаком =\n" +
                "\tmultipart/form-data — данные формы не кодируются. Это значение необходимо использовать для формы, содержащей элементы, управляющие загрузкой файлов. При отправке данных формы браузер разделяет каждый файл или вложение с помощью «границы из нескольких частей», которая является уникальным идентификатором, определяющим начало и конец каждой части. Границы части обозначаются линиями, начинающимися с тире. Это позволяет отправлять несколько частей в одном запросе и идентифицировать каждую из них со своими собственными метаданными, такими как MIME-тип, имя файла и т.д.\n" +
                "\ttext/plain — символы не кодируются, а пробелы заменяются на символ +. Полезен только для отладки.\n" +
                "\tСинтаксис: enctype=\"application/x-www-form-urlencoded\"", "", "6"));
        atributeItems.add(new AtributeItem(R.drawable.htmlform, "method", "Указывает HTTP-метод для отправки формы.", "63", "0", "\tУказывает HTTP-метод для отправки формы. Это значение переопределяется атрибутом formmethod в элементах <button>, <input type=\"submit\"> или <input type=\"image\">.\n" +
                "\tРазрешенные значения:\n" +
                "\tpost — данные формы включаются в тело HTTP-запроса. Метод является более надежным и безопасным, чем get и не имеет ограничений по размеру.\n" +
                "\tget — данные формы (пара имя-значение) добавляются в url-адрес с помощью разделителя ? и отправляются на сервер. Данный способ имеет ограничения по размеру отправляемых данных и не подходит для отправки паролей и конфиденциальной информации.\n" +
                "\tdialog — используется, если отправка формы предназначена для закрытия диалогового окна, в котором находится форма.\n" +
                "\tСинтаксис: method=\"post\"", "", "6"));
        atributeItems.add(new AtributeItem(R.drawable.htmlform, "name", "Задаёт имя формы.", "64", "0", "\tЗадает имя формы, которое будет использоваться для доступа к элементам формы через сценарии. Значение должно быть уникальным среди элементов формы в коллекции форм, в которой оно находится, если таковые имеются.\n" +
                "\tСинтаксис: name=\"login\"", "", "6"));
        atributeItems.add(new AtributeItem(R.drawable.htmlform, "novalidate", "Указывает, что форма не должна проверяться при отправке.", "65", "0", "\tЛогический атрибут, который указывает, что форма не должна проверяться при отправке. Если этот атрибут не установлен, его можно переопределить атрибутом formnovalidate элемента <button>, <input type=\"submit\"> или <input type=\"image\">, принадлежащих данной форме.\n" +
                "\tСинтаксис: novalidate", "", "6"));
        atributeItems.add(new AtributeItem(R.drawable.htmlform, "target", "Указывает, в каком окне выводится результат после отправки формы.", "66", "0", "\tУказывает, в каком окне выводить результат после отправки формы. Это значение переопределяется атрибутом formtarget в элементах <button>, <input type=\"submit\"> или <input type=\"image\">.\n" +
                "\tРазрешенные значения:\n" +
                "\t_blank — загружает ответ в новое окно/вкладку.\n" +
                "\t_self — загружает ответ в то же окно (значение по умолчанию).\n" +
                "\t_parent — загружает ответ в родительский фрейм. Если родителя нет, этот параметр ведет себя так же, как _self.\n" +
                "\t_top — загружает ответ во весь экран. Если родителя нет, этот параметр ведет себя так же, как _self.\n" +
                "\tСинтаксис: target=\"_blank\"", "", "6"));
        atributeItems.add(new AtributeItem(R.drawable.htmlform, "rel", "Определяет связь между связанным ресурсом и текущим документом.", "67", "0", "\tОпределяет связь между связанным ресурсом и текущим документом. Список разрешенных значений.\n" +
                "\tСинтаксис: rel=\"external\"", "", "6"));
        atributeItems.add(new AtributeItem(R.drawable.htmlform, "accept", "Строка, описывающая тип файла, выбиранный в элементе <input>.", "68", "0", "\tСтрока, описывающая тип файла, который может быть выбран пользователем в элементе <input type=\"file\">. Допускается указывать расширение имени файла без учета регистра, начинающееся с символа ., например, .jpg, .pdf или .doc или MIME-типа без расширения:\n" +
                "\taudio/* — разрешает загрузку аудиофайлов;\n" +
                "\tvideo/* — разрешает загрузку видеофайлов;\n" +
                "\timage/* — разрешает загрузку изображений.\n" +
                "\tСинтаксис: accept=\"image/*,.pdf\"", "", "6"));
        atributeItems.add(new AtributeItem(R.drawable.htmlform, "checked", "Для <input>, указывающий, выбран ли переключатель в данный момент.", "69", "0", "\tЛогический атрибут, действителен для <input type=\"radio\"> и <input type=\"checkbox\">. Если он присутствует в type=\"checkbox\", он указывает, что этот переключатель является выбранным в данный момент в группе одноименных переключателей. Если он присутствует в type=\"radio\", он указывает, что флажок установлен по умолчанию при загрузке страницы.\n" +
                "\tСинтаксис: checked", "", "6"));
        atributeItems.add(new AtributeItem(R.drawable.htmlform, "dirname", "Разрешает отправку направления элемента и даёт имя элемента управления.", "70", "0", "\tРазрешает отправку направления элемента и дает имя элемента управления, содержащего это значение, во время отправки формы. Устанавливается для <input type=\"text\"> и <input type=\"search\">.\n" +
                "\tСинтаксис:\n" +
                "\t<form action=\"addcomment.cgi\" method=post>\n" +
                "\t<p><label>Comment: <input type=text name=\"comment\" dirname=\"comment.dir\" required></label></p>\n" +
                "\t<p><button name=\"mode\" type=submit value=\"add\">Post Comment</button></p>\n" +
                "\t</form>\n" +
                "\tЕсли пользователь введет в поле Hello, тело отправки может быть примерно таким:\n" +
                "\tcomment=Hello&comment.dir=ltr&mode=add, где направление элемента будет значением, установленным браузером.", "", "6"));
        atributeItems.add(new AtributeItem(R.drawable.htmlform, "disabled", "Указывает, что пользователь не может редактировать и копировать содержимое поля.", "71", "0", "\tЛогический атрибут, который указывает, что пользователь не может редактировать и копировать содержимое поля. Отключенные поля ввода обычно отображаются более тусклым цветом или с использованием какой-либо другой формы индикации того, что поле недоступно для использования.\n" +
                "\tСинтаксис: disabled", "", "6"));
        atributeItems.add(new AtributeItem(R.drawable.htmlform, "form", "Определяет форму, которой принадлежит данное поле.", "72", "0", "\tОпределяет форму, которой принадлежит данное поле. Значение должно соответствовать идентификатору элемента <form> в том же документе.\n" +
                "\tСинтаксис: form=\"formID\"", "", "6"));
        atributeItems.add(new AtributeItem(R.drawable.htmlform, "formaction", "Указывает url-адрес обработчика данных формы.", "73", "0", "\tУказывает url-адрес обработчика данных формы, отправляемых при нажатии на кнопку. Только для <input type=\"image\"> и <input type=\"submit\">. Переопределяет значение атрибута action связанной формы.\n" +
                "\tСинтаксис: formaction=\"addcomment.cgi\"", "", "6"));
        atributeItems.add(new AtributeItem(R.drawable.htmlform, "formenctype", "Указывает, как данные должны кодироваться перед отправкой на сервер.", "74", "0", "\tУказывает, как данные должны кодироваться перед отправкой на сервер. Только для <input type=\"image\"> и <input type=\"submit\">. Переопределяет значение атрибута enctype связанной формы.\n" +
                "\tРазрешенные значения:\n" +
                "\tapplication/x-www-form-urlencoded — значение по умолчанию. Данные формы кодируются как пары имя-значение, аналогично строке запроса URI. Это формат по умолчанию для POST. Тело HTTP-сообщения, отправляемого на сервер, представляет собой одну строку запроса — пары имя-значение разделены &, а имена отделены от значений знаком =\n" +
                "\tmultipart/form-data — данные формы не кодируются. Это значение необходимо использовать для формы, содержащей элементы, управляющие загрузкой файлов. При отправке данных формы браузер разделяет каждый файл или вложение с помощью «границы из нескольких частей», которая является уникальным идентификатором, определяющим начало и конец каждой части. Границы части обозначаются линиями, начинающимися с тире. Это позволяет отправлять несколько частей в одном запросе и идентифицировать каждую из них со своими собственными метаданными, такими как MIME-тип, имя файла и т.д.\n" +
                "\ttext/plain — символы не кодируются, а пробелы заменяются на символ +. Полезен только для отладки.\n" +
                "\tСинтаксис: formenctype=\"multipart/form-data\"", "", "6"));
        atributeItems.add(new AtributeItem(R.drawable.htmlform, "formmethod", "Указывает метод, который браузер будет использовать для отправки формы.", "75", "0", "\tУказывает метод, который браузер будет использовать для отправки формы. Только для <input type=\"image\"> и <input type=\"submit\">. Переопределяет значение атрибута method связанной формы.\n" +
                "\tСинтаксис: formmethod=\"post\"", "", "6"));
        atributeItems.add(new AtributeItem(R.drawable.htmlform, "formnovalidate", "Указывает, что форма не подлежит проверке во время отправки.", "76", "0", "\tЛогический атрибут, который указывает, что форма не подлежит проверке во время отправки. Только для <input type=\"image\"> и <input type=\"submit\">. Переопределяет атрибут novalidate связанной формы.\n" +
                "\tСинтаксис: formnovalidate", "", "6"));
        atributeItems.add(new AtributeItem(R.drawable.htmlform, "formtarget", "Указывает, в каком окне выводить результат после отправки формы.", "77", "0", "\tУказывает, в каком окне выводить результат после отправки формы. Только для <input type=\"image\"> и <input type=\"submit\">. Переопределяет значение атрибута target для связанной формы.\n" +
                "\tРазрешенные значения:\n" +
                "\t_blank — загружает ответ в новое окно/вкладку.\n" +
                "\t_self — загружает ответ в то же окно (значение по умолчанию).\n" +
                "\t_parent — загружает ответ в родительский фрейм. Если родителя нет, этот параметр ведет себя так же, как _self.\n" +
                "\t_top — загружает ответ во весь экран. Если родителя нет, этот параметр ведет себя так же, как _self.\n" +
                "\tСинтаксис: formtarget=\"_blank\"", "", "6"));
        atributeItems.add(new AtributeItem(R.drawable.htmlform, "list", "Предоставляет список предопределённых значений.", "78", "0", "\tЗначение атрибута должно быть идентификатором элемента <datalist>, расположенного в том же документе. Для полей типа text, search, url, tel, email, date, month, week, time, datetime-local, number, range и color. Предоставляет список предопределенных значений, которые можно предложить пользователю для ввода.\n" +
                "\tСинтаксис: list=\"datalistID\"", "", "6"));
        atributeItems.add(new AtributeItem(R.drawable.htmlform, "max", "Ограничивает ввод, определяя наибольшее значение в диапазоне допустимых значений.", "79", "0", "\tОграничивает ввод, определяя наибольшее значение в диапазоне допустимых значений. Значение может быть как целым, так и дробным числом. Для полей типа date, month, week, time, datetime-local, number и range.\n" +
                "\tЕсли тип данных является периодическим (например, для дат или времени), значение max может быть меньше значения min, что указывает на то, что диапазон может повторяться; например, это позволяет указать временной диапазон от 22:00 до 4:00.\n" +
                "\tСинтаксис: max=\"100\"", "", "6"));
        atributeItems.add(new AtributeItem(R.drawable.htmlform, "maxlenght", "Определяет максимальное количество символов.", "80", "0", "\tОпределяет максимальное количество символов (в виде кодовых единиц UTF-16), которые пользователь может ввести в поле. Значение — целое число от 0 и выше. Это значение также должно быть больше или равно значению minlength.\n" +
                "\tСинтаксис: maxlength=\"10\"", "", "6"));
        atributeItems.add(new AtributeItem(R.drawable.htmlform, "min", "Определяет самое отрицательное значение в диапазоне допустимых значений.", "81", "0", "\tОпределяет самое отрицательное значение в диапазоне допустимых значений. Это значение должно быть меньше или равно значению атрибута max. Для полей типа date, month, week, time, datetime-local, number и range.\n" +
                "\tСинтаксис: min=\"12\"", "", "6"));
        atributeItems.add(new AtributeItem(R.drawable.htmlform, "minlenght", "Определяет минимальное количество символов, которое пользователь может ввести в поле ввода.", "82", "0", "\tОпределяет минимальное количество символов, которое пользователь может ввести в поле ввода. Это должно быть неотрицательное целочисленное значение, меньшее или равное значению, заданному параметром maxlength.\n" +
                "\tСинтаксис: minlength=\"24\"", "", "6"));
        atributeItems.add(new AtributeItem(R.drawable.htmlform, "multiple", "Указывает, что пользователь может вводить адреса электронной почты.", "82", "0", "\tЛогический атрибут, указывает, что пользователь может вводить адреса электронной почты, разделенные запятыми или может выбирать более одного файла при загрузке. Для полей типа email и file.\n" +
                "\tСинтаксис: multiple", "", "6"));
        atributeItems.add(new AtributeItem(R.drawable.htmlform, "pattern", "Указывает значение, которое должно пройти проверку.", "83", "0", "\tЗначением атрибута выступает допустимое регулярное выражение JavaScript, которому должно соответствовать вводимое значение, чтобы это значение прошло проверку. При использовании атрибута pattern рекомендуется сообщать пользователю об ожидаемом формате, включив рядом поясняющий текст. Вы также можете включить атрибут title, большинство браузеров будут отображать этот заголовок как всплывающую подсказку. Для полей типа tel, email, url, password и search.\n" +
                "\tСинтаксис: pattern=\"[a-z]{4,8}\"", "", "6"));
        atributeItems.add(new AtributeItem(R.drawable.htmlform, "placeholder", "Указывает краткую подсказку, какая информация ожидается в поле.", "84", "0", "\tСтрока, которая дает пользователю краткую подсказку о том, какая информация ожидается в поле. Отображается в поле ввода до заполнения.\n" +
                "\tСинтаксис: placeholder=\"Name\"", "", "6"));
        atributeItems.add(new AtributeItem(R.drawable.htmlform, "readonly", "Указывает, что пользователь не может изменять значение поля, только выделять и коипровать.", "85", "0", "\tЛогический атрибут, который указывает, что пользователь не может изменять значение поля, выделение и копирование текста при этом доступно. Для полей типа text, search, url, tel, email, date, month, week, time, datetime-local, number и password.\n" +
                "\tСинтаксис: readonly", "", "6"));
        atributeItems.add(new AtributeItem(R.drawable.htmlform, "required", "Указывает, что поле является обязательным.", "86", "0", "\tЛогический атрибут, который указывает, что данное поле является обязательным для заполнения. Если пользователь попытается отправить форму, не введя в это поле требуемое значение, то на экране отобразится предупреждающее сообщение.\n" +
                "\tСинтаксис: required", "", "6"));
        atributeItems.add(new AtributeItem(R.drawable.htmlform, "size", "Задаёт видимую ширину поля в символах.", "87", "0", "\tЗадает видимую ширину поля в символах. Значение по умолчанию — 20. Для полей типа email, password, tel, url и text.\n" +
                "\tСинтаксис: size=\"100\"", "", "6"));
        atributeItems.add(new AtributeItem(R.drawable.htmlform, "type", "Определяет тип отображаемого элемента управления.", "88", "0", "\tСтрока, определяющая тип отображаемого элемента управления.\n" +
                "\tРазрешенные значения:\n" +
                "\thidden\n" +
                "\tСоздает элемент управления, который не отображается, но значение которого отправляется на сервер.\n" +
                "\ttext \n" +
                "\tЗначение по умолчанию. Однострочное текстовое поле, разрывы строк автоматически удаляются из вводимого значения.\n" +
                "\tsearch \n" +
                "\tОднострочное текстовое поле для ввода строк поиска, разрывы строк автоматически удаляются из вводимого значения. Некоторые браузеры отображают иконку удаления — крестик, которую можно использовать для очистки поля.\n" +
                "\ttel \n" +
                "\tПоле для ввода номера телефона. Отображает клавиатуру телефона на некоторых устройствах с динамической клавиатурой.\n" +
                "\turl \n" +
                "\tПоле для ввода URL. Выглядит как поле для ввода текста, но имеет параметры проверки и соответствующую клавиатуру для поддержки браузеров и устройств с динамической клавиатурой.\n" +
                "\temail \n" +
                "\tПоле для ввода адреса электронной почты. Выглядит как ввод текста, но имеет параметры проверки и соответствующую клавиатуру для поддержки браузеров и устройств с динамической клавиатурой.\n" +
                "\tpassword \n" +
                "\tОднострочное текстовое поле, в котором вводимые пользователем символы заменяются на звездочки, маркеры, либо другие, установленные браузером значки. Предупредит пользователя, если сайт небезопасен.\n" +
                "\tdate \n" +
                "\tЭлемент управления, открывает средство выбора даты (год, месяц и день, без времени).\n" +
                "\tmonth \n" +
                "\tЭлемент управления, открывает средство выбора месяца и года.\n" +
                "\tweek \n" +
                "\tЭлемент управления, открывает средство выбора номера недели и года.\n" +
                "\ttime \n" +
                "\tЭлемент управления, позволяет вводить время в 24-часовом формате по шаблону чч:мм.\n" +
                "\tdatetime-local \n" +
                "\tЭлемент управления, позволяет вводить дату и время по шаблону дд.мм.гггг чч:мм.\n" +
                "\tnumber \n" +
                "\tПоле для ввода целочисленных значений. Атрибуты min, max и step задают верхний, нижний пределы и шаг между значениями соответственно. Эти атрибуты предполагаются у всех элементов, имеющих численные показатели, а их значения по умолчанию зависят от типа элемента.\n" +
                "\trange \n" +
                "\tЭлемент управления для ввода числа, точное значение которого не важно. Отображается как виджет диапазона со средним значением по умолчанию. Используется вместе с min и max для определения диапазона допустимых значений.\n" +
                "\tcolor \n" +
                "\tОткрывает виджет выбора цвета в шестнадцатеричном формате.\n" +
                "\tcheckbox \n" +
                "\tОтображает флажок, позволяющий выбирать/отменять выбор отдельных значений.\n" +
                "\tradio \n" +
                "\tОтображает переключатель, позволяющий выбрать одно значение из нескольких вариантов с одинаковым значением name.\n" +
                "\tfile\n" +
                "\tПоле для выбора одного или нескольких файлов из хранилища своего устройства. После выбора файлы можно загрузить на сервер с помощью отправки формы или манипулировать ими с помощью кода JavaScript и File API.\n" +
                "\tsubmit \n" +
                "\tОтображает кнопку отправки формы.\n" +
                "\timage \n" +
                "\tСоздает графическую кнопку отправки формы, отображает изображение, определенное атрибутом src или значение атрибута alt, если изображение отсутствует.\n" +
                "\treset \n" +
                "\tСоздает кнопку, которая сбрасывает содержимое формы к значениям по умолчанию.\n" +
                "\tbutton \n" +
                "\tСоздает кнопку без поведения по умолчанию, надписью к кнопке является значение атрибута value, по умолчанию пустое.\n" +
                "\tСинтаксис: type=\"button\"", "", "6"));
        atributeItems.add(new AtributeItem(R.drawable.htmlform, "value", "Определяет текущее редактируемое значение для некоторых полей.", "89", "0", "\tСтрока, которая определяет текущее редактируемое значение для полей типа text и password; для полей типа button, reset и submit — текст на кнопке; для полей типа checkbox, radio и hidden — определяет связанное значение, которое отправляется на сервер.\n" +
                "\tСинтаксис: value=\"medium\"", "", "6"));

        fullItem.addAll(atributeItems);
    }

    @SuppressLint("NotifyDataSetChanged")
    public void show(String category) {

       atributeItems.clear();
       atributeItems.addAll(fullItem);

        ArrayList<AtributeItem> filter = new ArrayList<>();
        for (AtributeItem c : atributeItems) {
            if (c.getCategory().equals(category)) {
                filter.add(c);
            }
        }
        atributeItems.clear();
        atributeItems.addAll(filter);
        recyclerView.setAdapter(atributeAdapter);
    }
    private void handleButtonClicked(Button clickedButton) {
        if (currentButton != null) {
            currentButton.setBackgroundResource(R.drawable.category_item);
        }

        clickedButton.setBackgroundResource(R.drawable.category_item_active);

        currentButton = clickedButton;
    }
    @Override
    public void onBackPressed() {
        super.onBackPressed();
        Intent intent = new Intent(this, MainActivity.class);
        startActivity(intent);
    }

}

